/* tslint:disable */
/* eslint-disable */
/**
 * TAPO Apartments API
 * API for TAPO Apartments website
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponse,
  ExternalAvailabilityResponse,
} from '../models/index';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    ExternalAvailabilityResponseFromJSON,
    ExternalAvailabilityResponseToJSON,
} from '../models/index';

export interface AdminApartmentsSlugReloadExternalAvailabilityPostRequest {
    slug: string;
    xAPIKey: string;
}

/**
 * 
 */
export class AdminApi extends runtime.BaseAPI {

    /**
     * Reload and return external availability for an apartment. Requires admin API key.
     * Reload external availability
     */
    async adminApartmentsSlugReloadExternalAvailabilityPostRaw(requestParameters: AdminApartmentsSlugReloadExternalAvailabilityPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExternalAvailabilityResponse>> {
        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling adminApartmentsSlugReloadExternalAvailabilityPost().'
            );
        }

        if (requestParameters['xAPIKey'] == null) {
            throw new runtime.RequiredError(
                'xAPIKey',
                'Required parameter "xAPIKey" was null or undefined when calling adminApartmentsSlugReloadExternalAvailabilityPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xAPIKey'] != null) {
            headerParameters['X-API-Key'] = String(requestParameters['xAPIKey']);
        }


        let urlPath = `/admin/apartments/{slug}/reload-external-availability`;
        urlPath = urlPath.replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExternalAvailabilityResponseFromJSON(jsonValue));
    }

    /**
     * Reload and return external availability for an apartment. Requires admin API key.
     * Reload external availability
     */
    async adminApartmentsSlugReloadExternalAvailabilityPost(requestParameters: AdminApartmentsSlugReloadExternalAvailabilityPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExternalAvailabilityResponse> {
        const response = await this.adminApartmentsSlugReloadExternalAvailabilityPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
