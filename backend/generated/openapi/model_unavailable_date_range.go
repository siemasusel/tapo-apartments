/*
TAPO Apartments API

API for TAPO Apartments website

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UnavailableDateRange type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UnavailableDateRange{}

// UnavailableDateRange struct for UnavailableDateRange
type UnavailableDateRange struct {
	// Start date of the unavailable period
	StartDate string `json:"startDate"`
	// End date of the unavailable period
	EndDate string `json:"endDate"`
	// Source of the unavailable dates (e.g., \"website\", \"bookingcom\")
	Source string `json:"source"`
}

type _UnavailableDateRange UnavailableDateRange

// NewUnavailableDateRange instantiates a new UnavailableDateRange object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUnavailableDateRange(startDate string, endDate string, source string) *UnavailableDateRange {
	this := UnavailableDateRange{}
	this.StartDate = startDate
	this.EndDate = endDate
	this.Source = source
	return &this
}

// NewUnavailableDateRangeWithDefaults instantiates a new UnavailableDateRange object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUnavailableDateRangeWithDefaults() *UnavailableDateRange {
	this := UnavailableDateRange{}
	return &this
}

// GetStartDate returns the StartDate field value
func (o *UnavailableDateRange) GetStartDate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value
// and a boolean to check if the value has been set.
func (o *UnavailableDateRange) GetStartDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StartDate, true
}

// SetStartDate sets field value
func (o *UnavailableDateRange) SetStartDate(v string) {
	o.StartDate = v
}

// GetEndDate returns the EndDate field value
func (o *UnavailableDateRange) GetEndDate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EndDate
}

// GetEndDateOk returns a tuple with the EndDate field value
// and a boolean to check if the value has been set.
func (o *UnavailableDateRange) GetEndDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EndDate, true
}

// SetEndDate sets field value
func (o *UnavailableDateRange) SetEndDate(v string) {
	o.EndDate = v
}

// GetSource returns the Source field value
func (o *UnavailableDateRange) GetSource() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Source
}

// GetSourceOk returns a tuple with the Source field value
// and a boolean to check if the value has been set.
func (o *UnavailableDateRange) GetSourceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Source, true
}

// SetSource sets field value
func (o *UnavailableDateRange) SetSource(v string) {
	o.Source = v
}

func (o UnavailableDateRange) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UnavailableDateRange) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["startDate"] = o.StartDate
	toSerialize["endDate"] = o.EndDate
	toSerialize["source"] = o.Source
	return toSerialize, nil
}

func (o *UnavailableDateRange) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"startDate",
		"endDate",
		"source",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUnavailableDateRange := _UnavailableDateRange{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUnavailableDateRange)

	if err != nil {
		return err
	}

	*o = UnavailableDateRange(varUnavailableDateRange)

	return err
}

type NullableUnavailableDateRange struct {
	value *UnavailableDateRange
	isSet bool
}

func (v NullableUnavailableDateRange) Get() *UnavailableDateRange {
	return v.value
}

func (v *NullableUnavailableDateRange) Set(val *UnavailableDateRange) {
	v.value = val
	v.isSet = true
}

func (v NullableUnavailableDateRange) IsSet() bool {
	return v.isSet
}

func (v *NullableUnavailableDateRange) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUnavailableDateRange(val *UnavailableDateRange) *NullableUnavailableDateRange {
	return &NullableUnavailableDateRange{value: val, isSet: true}
}

func (v NullableUnavailableDateRange) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUnavailableDateRange) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


